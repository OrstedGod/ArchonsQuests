package com.example.archonsquests

import android.app.DatePickerDialog
import android.app.TimePickerDialog
import android.content.Intent
import android.content.SharedPreferences
import android.graphics.Color
import android.os.Bundle
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.res.ResourcesCompat
import com.example.archonsquests.databinding.ActivityMainBinding
import java.util.Calendar
import android.content.pm.PackageManager
import androidx.core.app.NotificationManagerCompat
import androidx.core.content.ContextCompat
import android.Manifest
import android.net.Uri
import android.os.Build
import android.text.TextUtils
import android.util.Log
import android.view.View
import android.view.ViewGroup
import android.view.animation.AnimationUtils
import androidx.activity.result.contract.ActivityResultContracts.RequestPermission
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import com.google.android.material.snackbar.Snackbar
import kotlinx.coroutines.launch
import androidx.work.OneTimeWorkRequestBuilder
import androidx.work.WorkManager
import androidx.work.workDataOf
import androidx.work.Constraints
import androidx.work.NetworkType
import java.util.concurrent.TimeUnit
import android.view.animation.Animation
import android.widget.FrameLayout
import java.text.SimpleDateFormat
import java.util.*

data class Task(
    val text: String,              // val - —Ç–µ–∫—Å—Ç –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
    var isCompleted: Boolean = false,  // var - —Å—Ç–∞—Ç—É—Å –º–µ–Ω—è–µ—Ç—Å—è
    var isSelected: Boolean = false,    // var - –≤—ã–¥–µ–ª–µ–Ω–∏–µ –º–µ–Ω—è–µ—Ç—Å—è
    var reminder: Long? = null, // –î–æ–±–∞–≤–ª–µ–Ω–æ
)

class MainActivity : AppCompatActivity() {
    private val tasks = mutableListOf<Task>() // —Å–ø–∏—Å–æ–∫ –¥–µ–ª
    private lateinit var sharedPreferences: SharedPreferences
    private lateinit var binding: ActivityMainBinding
    private var permissionGranted = false
    private val oswaldBold by lazy { ResourcesCompat.getFont(this, R.font.oswald_bold) }
    private var rotationAnimations = mutableMapOf<View, Animation>()
    private lateinit var viewModel: MainViewModel

    private lateinit var feedbackButton: ImageView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        sharedPreferences = getSharedPreferences("user_prefs", MODE_PRIVATE)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        viewModel = ViewModelProvider(this)[MainViewModel::class.java]
        viewModel.init(this)

        // –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        observeViewModelEvents()

        // –ü—Ä–æ–≤–µ–∫—Ä–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        handleUserLogin()

        animateElements()
        checkAndRequestNotificationPermission()
        createFeedbackButton()
        setupButtonListeners()
    }

    private fun handleUserLogin() {
        val userName = sharedPreferences.getString("user_name", null)
        if (userName != null) {
            binding.greetingText.text = "–ü—Ä–∏–≤–µ—Ç, $userName!"
            loadTasks()
        } else {
            navigateToLogin()
        }
    }

    private fun navigateToLogin() {
        val intent = Intent(this, LoginActivity::class.java)
        startActivity(intent)
        finish()
    }

    private fun setupButtonListeners() {
        binding.addButton.setOnClickListener { addTask() }
        binding.deleteButton.setOnClickListener { deleteSelectedTasks() }
        binding.completeButton.setOnClickListener { completeSelectedTasks() }
        binding.logoutButton.setOnClickListener { logout() }
        binding.feedbackButton.setOnClickListener {}
    }

    private fun observeViewModelEvents() {
        lifecycleScope.launch {
            repeatOnLifecycle(Lifecycle.State.STARTED) {
                viewModel.events.collect { event ->
                    when (event) {
                        is MainViewModel.Event.UpdateAvailable -> {
                            showUpdateDialog(event.appUpdateInfo)
                        }

                        is MainViewModel.Event.DownloadProgress -> {
                            showDownloadProgress(event.progress)
                        }

                        is MainViewModel.Event.UpdateDownloaded -> {
                            showInstallReadyDialog()
                        }

                        is MainViewModel.Event.UpdateCompleted -> {
                            showToast("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                        }

                        is MainViewModel.Event.Error -> {
                            showError(event.message ?: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        }

                        is MainViewModel.Event.Installing -> {
                            showToast("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
                        }

                        is MainViewModel.Event.UpdateCancelled -> {
                            showToast("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                        }

                        is MainViewModel.Event.UpdatePending -> {
                            showToast("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
                        }

                        else -> {
                            // –î–æ–±–∞–≤–ª–µ–Ω –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –µ—Å–ª–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
                            Log.w("MainActivity", "–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: $event")
                        }
                    }
                }
            }
        }
    }

    private fun showUpdateDialog(appUpdateInfo: ru.rustore.sdk.appupdate.model.AppUpdateInfo) {
        AlertDialog.Builder(this)
            .setTitle("üåü –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!")
            .setMessage("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é Archon's Quests?")
            .setPositiveButton("–û–±–Ω–æ–≤–∏—Ç—å") { _, _ ->
                viewModel.startFlexibleUpdate(appUpdateInfo)
            }
            .setNegativeButton("–ü–æ–∑–∂–µ") { dialog, _ ->
                dialog.dismiss()
            }
            .setCancelable(false)
            .show()
    }

    private fun showInstallReadyDialog() {
        AlertDialog.Builder(this)
            .setTitle("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
            .setMessage("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ.")
            .setPositiveButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å") { _, _ ->
                viewModel.completeUpdateRequested()
            }
            .setNegativeButton("–ü–æ–∑–∂–µ") { dialog, _ ->
                dialog.dismiss()
                showToast("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ")
            }
            .show()
    }

    private fun showError(message: String) {
        AlertDialog.Builder(this)
            .setTitle("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            .setMessage(message)
            .setPositiveButton("–ü–æ–Ω—è—Ç–Ω–æ") { dialog, _ ->
                dialog.dismiss()
            }
            .show()
    }

    private fun showToast(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_LONG).show()
    }

    private fun showDownloadProgress(progress: Int) {
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Snackbar –∏–ª–∏ ProgressDialog
        Snackbar.make(
            findViewById(android.R.id.content),
            "–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $progress%",
            Snackbar.LENGTH_SHORT
        ).show()
    }

    private fun animateElements() {
        binding.greetingText.apply {
            alpha = 0f
            animate().alpha(1f).setDuration(700L).start()
        }

        binding.taskInput.apply {
            alpha = 0f
            animate().alpha(1f).setStartDelay(100).setDuration(600L).start()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        binding.greetingText.clearAnimation()
        binding.taskInput.clearAnimation()
        saveTasks()
        for ((view, _) in rotationAnimations) {
            view.clearAnimation()
        }
        rotationAnimations.clear()
    }

    private fun logout() {
        AlertDialog.Builder(this).create().apply {
            setTitle("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã—Ö–æ–¥")
            setMessage("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?")
            setButton(AlertDialog.BUTTON_POSITIVE, "–î–∞") { _, _ ->
                val editor = sharedPreferences.edit()
                editor.remove("user_name").apply()
                Toast.makeText(this@MainActivity, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", Toast.LENGTH_SHORT).show()
                navigateToLogin()
            }
            setButton(AlertDialog.BUTTON_NEGATIVE, "–ù–µ—Ç") { dialog, _ -> dialog.dismiss() }
            show()
        }
    }

    private val requestNotificationPermission = registerForActivityResult(
        RequestPermission()
    ) { granted ->
        permissionGranted = granted
        Toast.makeText(
            this,
            if (granted) "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –°–µ–ª–µ—Å—Ç–∏–∏ –ø–æ–ª—É—á–µ–Ω–æ!" else "–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –°–µ–ª–µ—Å—Ç–∏–µ–π",
            Toast.LENGTH_SHORT
        ).show()
    }

    private fun checkAndRequestNotificationPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            // –¢–æ–ª—å–∫–æ –¥–ª—è Android 13+ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.POST_NOTIFICATIONS) !=
                PackageManager.PERMISSION_GRANTED
            ) {
                requestNotificationPermission.launch(Manifest.permission.POST_NOTIFICATIONS)
            } else {
                permissionGranted = true
            }
        } else {
            // –î–ª—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            permissionGranted = true
        }
    }

    private fun cancelTaskNotification(task: Task) {
        try {
            val notificationId = task.hashCode()

            // –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–µ
            NotificationManagerCompat.from(this).cancel(notificationId)

            // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            WorkManager.getInstance(this)
                .cancelAllWorkByTag("task_notification_${task.hashCode()}")

            Log.d("MainActivity", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –¥–ª—è: ${task.text}")

        } catch (e: Exception) {
            Log.e("MainActivity", "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è: ${task.text}", e)
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
    private fun saveTasks() {
        val editor = sharedPreferences.edit()
        val userName = sharedPreferences.getString("user_name", "default_user")
        editor.putInt("${userName}_tasks_count", tasks.size)

        for (i in tasks.indices) {
            val task = tasks[i]
            editor.putString("${userName}_task_text_$i", task.text)
            editor.putBoolean("${userName}_task_is_completed_$i", task.isCompleted)
            editor.putBoolean("${userName}_task_is_selected_$i", task.isSelected)
            editor.putLong("${userName}_task_reminder_$i", task.reminder ?: 0L)
            editor.putInt("task_id_$i", task.hashCode())
        }
        editor.apply()
    }

    private fun addTask() {
        val text = binding.taskInput.text.toString().trim()
        if (text.isEmpty()) {
            binding.taskInput.error = "–í–µ–ª–∏–∫–∏–π –°—ë–≥—É–Ω, –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é –∑–∞–¥–∞—á—É!"
            return
        }
        if (text.length > 50) {
            binding.taskInput.error = "–í–µ–ª–∏–∫–∏–π –°—ë–≥—É–Ω, —É –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!"
            return
        }

        val task = Task(
            text,
            isCompleted = false,
            isSelected = false,
            reminder = null
        )

        showSetReminderDialog(task) { selectedTime ->
            task.reminder = selectedTime
            tasks.add(task)
            updateTaskList()
            saveTasks()
            Toast.makeText(this, "–°—ë–≥—É–Ω, –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!", Toast.LENGTH_SHORT)
                .show()
            scheduleTaskNotification(task, selectedTime)
        }

        // –û—á–∏—â–∞–µ–º EditText —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏ –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞
        binding.taskInput.setText("")
        binding.taskInput.error = null // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞
    }

    private fun formatReminderTime(reminder: Long): String {
        val calendar = Calendar.getInstance().apply {
            timeInMillis = reminder
        }
        return SimpleDateFormat("HH:mm dd.MM.yyyy", Locale.getDefault()).format(calendar.time)
    }

    private fun showSetReminderDialog(task: Task, onTimeSelected: (Long) -> Unit) {
        AlertDialog.Builder(this)
            .setTitle("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?")
            .setMessage("–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ - ${task.text}?")
            .setPositiveButton("–î–∞") { _, _ ->
                showDateTimePicker { selectedTime ->
                    onTimeSelected(selectedTime)
                }
            }
            .setNegativeButton("–ù–µ—Ç") { dialog, _ ->
                dialog.dismiss()
                Toast.makeText(
                    this,
                    "–°—ë–≥—É–Ω, –∑–∞–¥–∞—á–∞–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!",
                    Toast.LENGTH_SHORT
                ).show()
                // –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                tasks.add(task)
                updateTaskList()
                saveTasks()
            }
            .setCancelable(false)
            .show()
    }

    private fun showDateTimePicker(onTimeSelected: (Long) -> Unit) {
        val calendar = Calendar.getInstance()
        val currentYear = calendar.get(Calendar.YEAR)
        val currentMonth = calendar.get(Calendar.MONTH)
        val currentDay = calendar.get(Calendar.DAY_OF_MONTH)

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ TimePicker
        fun showTimePicker(year: Int, month: Int, dayOfMonth: Int) {
            TimePickerDialog(this, { _, hourOfDay, minute ->
                val selectedCalendar = Calendar.getInstance().apply {
                    set(year, month, dayOfMonth, hourOfDay, minute, 0)
                }

                val selectedTime = selectedCalendar.timeInMillis

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
                if (selectedTime <= System.currentTimeMillis()) {
                    Toast.makeText(this, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º!", Toast.LENGTH_SHORT).show()
                    // ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º TimePicker
                    showTimePicker(year, month, dayOfMonth)
                    return@TimePickerDialog
                }

                // ‚úÖ –í—Å—ë –æ–∫ ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –≤—Ä–µ–º—è
                onTimeSelected(selectedTime)
            }, calendar.get(Calendar.HOUR_OF_DAY), calendar.get(Calendar.MINUTE), true).show()
        }

        // DatePicker —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã
        DatePickerDialog(this, { _, year, month, dayOfMonth ->
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
            val selectedCalendar = Calendar.getInstance().apply {
                set(year, month, dayOfMonth, 0, 0, 0)
                set(Calendar.MILLISECOND, 0)
            }
            val todayCalendar = Calendar.getInstance().apply {
                set(Calendar.HOUR_OF_DAY, 0)
                set(Calendar.MINUTE, 0)
                set(Calendar.SECOND, 0)
                set(Calendar.MILLISECOND, 0)
            }

            if (selectedCalendar.timeInMillis < todayCalendar.timeInMillis) {
                Toast.makeText(this, "–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É!", Toast.LENGTH_SHORT).show()
                return@DatePickerDialog
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º TimePicker
            showTimePicker(year, month, dayOfMonth)
        }, currentYear, currentMonth, currentDay).apply {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É - —Å–µ–≥–æ–¥–Ω—è
            datePicker.minDate = System.currentTimeMillis() - 1000 // –º–∏–Ω—É—Å 1 —Å–µ–∫
        }.show()
    }

    private fun scheduleTaskNotification(task: Task, notificationTime: Long) {
        val currentTime = System.currentTimeMillis()
        val delayMillis = notificationTime - currentTime
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ
        if (delayMillis <= 0) {
            Toast.makeText(this, "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ!", Toast.LENGTH_SHORT).show()
            return
        }
        val data = workDataOf(
            TaskNotificationWorker.TASK_TEXT to task.text,
            TaskNotificationWorker.TASK_ID to task.hashCode()
        )
        val workRequest = OneTimeWorkRequestBuilder<TaskNotificationWorker>()
            .setInputData(data)
            .setInitialDelay(delayMillis, TimeUnit.MILLISECONDS)
            .setConstraints(
                Constraints.Builder()
                    .setRequiredNetworkType(NetworkType.NOT_REQUIRED)
                    .build()
            )
            .addTag("task_notification_${task.hashCode()}")
            .build()
        WorkManager.getInstance(this)
            .enqueue(workRequest)
    }

    private fun updateTaskList() {
        binding.tContainer.removeAllViews()
        for ((_, task) in tasks.withIndex()) {
            val taskLayout = createTaskView(task)
            val layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            ).apply {
                topMargin = resources.getDimensionPixelSize(R.dimen.task_margin)
            }
            binding.tContainer.addView(taskLayout, layoutParams)
        }
    }

    private fun createTaskView(task: Task): LinearLayout {
        val taskLayout = LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            gravity = android.view.Gravity.CENTER_VERTICAL
            background = resources.getDrawable(R.drawable.task_background, theme)
            layoutParams = LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT
            )
            setPadding(20, 10, 20, 10)
        }

        val icon = ImageView(this).apply {
            layoutParams = LinearLayout.LayoutParams(69, 69)
            setOnClickListener {
                task.isSelected = !task.isSelected
                when {
                    task.isCompleted -> {
                        setImageResource(R.drawable.ic_electro_active)
                        this.alpha = 0.25f
                        this.isEnabled = false
                    }

                    task.isSelected -> {
                        setImageResource(R.drawable.ic_electro_active)
                    }

                    else -> {
                        setImageResource(R.drawable.ic_electro_off)
                    }
                }
            }
        }

        updateIconState(icon, task)
        taskLayout.addView(icon)

        // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
        val textAndTimeContainer = LinearLayout(this).apply {
            orientation = LinearLayout.HORIZONTAL
            layoutParams = LinearLayout.LayoutParams(
                0,
                LinearLayout.LayoutParams.WRAP_CONTENT,
                1f // –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—ë –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            )
            gravity = android.view.Gravity.CENTER_VERTICAL
        }

        // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
        val textView = TextView(this).apply {
            setTextColor(Color.parseColor("#FFFFFF"))
            text = task.text
            textSize = 22f
            typeface = oswaldBold
            setPadding(20, 0, 16, 0)
            maxLines = 3
            ellipsize = TextUtils.TruncateAt.END

            if (task.isCompleted) {
                paint.isStrikeThruText = true
                alpha = 0.25f
            }
        }
        textAndTimeContainer.addView(textView)

        // –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ‚Äî –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∞–≤–µ–µ —Ç–µ–∫—Å—Ç–∞
        val reminderTextView = TextView(this).apply {
            setTextColor(Color.parseColor("#CCCCCC"))
            textSize = 16f
            typeface = oswaldBold
            gravity = android.view.Gravity.START
            setPadding(10, 0, 0, 0) // –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
            if (task.isCompleted) {
                paint.isStrikeThruText = true
                alpha = 0.25f
            }
        }

        if (task.reminder != null) {
            reminderTextView.text = "‚Ä¢ ${formatReminderTime(task.reminder!!)}"
            reminderTextView.visibility = View.VISIBLE
        } else {
            reminderTextView.visibility = View.GONE
        }

        textAndTimeContainer.addView(reminderTextView)
        taskLayout.addView(textAndTimeContainer)

        return taskLayout
    }

    private fun startRotationAnimation(view: View) {
        val rotation = AnimationUtils.loadAnimation(this, R.anim.slow_rotation)
        rotation.repeatCount = Animation.INFINITE
        view.startAnimation(rotation)
        rotationAnimations[view] = rotation
    }

    private fun updateIconState(icon: ImageView, task: Task) {
        when {
            task.isCompleted -> {
                // –ó–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
                icon.setImageResource(R.drawable.ic_electro_active)
                icon.alpha = 0.25f
                icon.isEnabled = false
                icon.clearAnimation()  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            }

            task.isSelected -> {
                // –í—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
                icon.setImageResource(R.drawable.ic_electro_active)
                icon.alpha = 1.0f
                icon.isEnabled = true
                startRotationAnimation(icon)
            }

            else -> {
                // –û–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞
                icon.setImageResource(R.drawable.ic_electro_off)
                icon.alpha = 1.0f
                icon.isEnabled = true
                startRotationAnimation(icon)
            }
        }
    }

    private fun loadTasks() {
        val userName = sharedPreferences.getString("user_name", "default_user")
        val count = sharedPreferences.getInt("${userName}_tasks_count", 0)
        tasks.clear()
        for (i in 0 until count) {
            val text = sharedPreferences.getString("${userName}_task_text_$i", "")
            val isCompleted =
                sharedPreferences.getBoolean("${userName}_task_is_completed_$i", false)
            val isSelected = sharedPreferences.getBoolean("${userName}_task_is_selected_$i", false)
            val reminder = sharedPreferences.getLong("${userName}_task_reminder_$i", 0L)

            if (text != null) {
                val task = Task(text, isCompleted, isSelected).apply {
                    this.reminder = if (reminder > 0L) reminder else null
                }
                tasks.add(task)
            }
        }
        updateTaskList()
    }

    private fun deleteSelectedTasks() {
        val selectedTasks = tasks.filter { it.isSelected || it.isCompleted }
        if (selectedTasks.isNotEmpty()) {
            for (task in selectedTasks) {
                // ‚úÖ –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                WorkManager.getInstance(this)
                    .cancelAllWorkByTag("task_notification_${task.hashCode()}")
            }
            tasks.removeAll(selectedTasks)
            updateTaskList()
            saveTasks()
        } else {
            Toast.makeText(this, "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", Toast.LENGTH_SHORT).show()
        }
    }

    private fun completeSelectedTasks() {
        val selectedTasks = tasks.filter { it.isSelected }
        if (selectedTasks.isEmpty()) {
            Toast.makeText(this, "–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è!", Toast.LENGTH_SHORT).show()
            return
        }
        for (task in selectedTasks) {
            task.isCompleted = true
            task.isSelected = false
            cancelTaskNotification(task)
            val notificationId = task.hashCode()
            val notificationManager = NotificationManagerCompat.from(this)
            notificationManager.cancel(notificationId)
        }
        updateTaskList()
        saveTasks()
        Toast.makeText(this, "–ó–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!", Toast.LENGTH_SHORT).show()
    }

    private fun createFeedbackButton() {
        feedbackButton = ImageView(this).apply {

            val size = 56.dpToPx()
            layoutParams = FrameLayout.LayoutParams(size, size).apply {
                gravity = android.view.Gravity.BOTTOM or android.view.Gravity.END
                setMargins(0, 0, 16.dpToPx(), 16.dpToPx())
            }

            scaleType = ImageView.ScaleType.CENTER_CROP
            contentDescription = "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"

            setOnClickListener {
                showFeedbackDialog()
            }
        }

        val rootView = findViewById<View>(android.R.id.content) as ViewGroup
        rootView.addView(feedbackButton)
    }

    private fun showFeedbackDialog() {
        AlertDialog.Builder(this)
            .setTitle("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
            .setMessage("–ù–∞–ø–∏—à–∏ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É!")
            .setPositiveButton("–ù–∞–ø–∏—Å–∞—Ç—å") { _, _ ->
                openGoogleForms()
            }
            .setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
            .show()
    }

    private fun openGoogleForms() {
        val formUrl = "https://docs.google.com/forms/d/e/your-form-id/viewform" +
                "?usp=pp_url&entry.7024429=${getAppVersion()}" +  // –ó–∞–º–µ–Ω–∏ 123456789 –Ω–∞ ID –ø–æ–ª—è
                "&entry.941118847=${Build.MODEL}"       // –ó–∞–º–µ–Ω–∏ 987654321 –Ω–∞ ID –ø–æ–ª—è
        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(formUrl))
        startActivity(intent)
    }

    private fun Int.dpToPx(): Int {
        return (this * resources.displayMetrics.density).toInt()
    }

    private fun getAppVersion(): String {
        return try {
            val packageInfo = packageManager.getPackageInfo(packageName, 0)
            packageInfo.versionName ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"
        } catch (e: Exception) {
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"
        }
    }
}